# References:
# * https://github.com/neptune-networks/peering/blob/master/templates/bird.conf.erb
# * https://github.com/NLNOG/bgpfilterguide

define INVALID_V4 = [
  0.0.0.0/0,              # Default route
  0.0.0.0/8{8,32},        # IANA - Local Identification
  10.0.0.0/8{8,32},       # RFC 1918 - Private Use
  100.64.0.0/10{10,32},   # RFC 6598 - Shared Address Space
  127.0.0.0/8{8,32},      # IANA - Loopback
  169.254.0.0/16{16,32},  # RFC 3927 - Link Local
  172.16.0.0/12{12,32},   # RFC 1918 - Private Use
  192.0.2.0/24{24,32},    # RFC 5737 - TEST-NET-1
  192.88.99.0/24{24,32},  # RFC 3068 - 6to4 prefix
  192.168.0.0/16{16,32},  # RFC 1918 - Private Use
  198.18.0.0/15{15,32},   # RFC 2544 - Network Interconnect Device Benchmark Testing
  198.51.100.0/24{24,32}, # RFC 5737 - TEST-NET-2
  203.0.113.0/24{24,32},  # RFC 5737 - TEST-NET-3
  224.0.0.0/3{3,32}       # RFC 5771 - Multicast (formerly Class D)
];

define INVALID_V6 = [
  2001::/33{33,128},        # RFC 4380 - Teredo prefix
  2001:0:8000::/33{33,128}, # RFC 4380 - Teredo prefix
  2001:2::/48{48,128},      # RFC 5180 - Benchmarking
  2001:3::/32{32,128},      # RFC 7450 - Automatic Multicast Tunneling
  2001:10::/28{28,128},     # RFC 4843 - Deprecated ORCHID
  2001:20::/28{28,128},     # RFC 7343 - ORCHIDv2
  2001:db8::/32{32,128},    # RFC 3849 - NON-ROUTABLE range to be used for documentation purpose
  2002::/16{16,128},        # RFC 3068 - 6to4 prefix
  3ffe::/16{16,128}         # RFC 5156 - used for the 6bone but was returned
];

define INVALID_ASNS = [
  0,                      # Reserved. RFC7607
  23456,                  # AS_TRANS. RFC6793
  64496..64511,           # Reserved for use in documentation and sample code. RFC5398
  64512..65534,           # Reserved for Private Use. RFC6996
  65535,                  # Reserved. RFC7300
  65536..65551,           # Reserved for use in documentation and sample code. RFC5398
  65552..131071,          # Reserved.
  4200000000..4294967294, # Reserved for Private Use. [RFC6996]
  4294967295              # Reserved. RFC7300
];

define TRANSIT_ASNS = [
  174,  # Cogent
  701,  # UUNET
  1299, # Telia
  2914, # NTT Ltd.
  3257, # GTT Backbone
  3320, # Deutsche Telekom AG (DTAG)
  3356, # Level3
  3491, # PCCW
  4134, # Chinanet
  5511, # Orange opentransit
  6453, # Tata Communications
  6461, # Zayo Bandwidth
  6762, # Seabone / Telecom Italia
  6830, # Liberty Global
  7018  # AT&T
];

function _reject(string reason) {
  reject "REJECTED: ", reason, ", pfx=", net, ", proto=", proto, ", aspath=", bgp_path;
}

function assert_source() {
  if source != RTS_BGP then reject;
}

function assert_net_routable() {
  if (net.type = NET_IP4 && net !~ [ 0.0.0.0/0{8,24} ])
  || (net.type = NET_IP6 && net !~ [ 2000::/3{12,48} ])
  then reject;
}

function assert_net_not_bogon() {
  if (net.type = NET_IP4 && net ~ INVALID_V4)
  || (net.type = NET_IP6 && net ~ INVALID_V6)
  then _reject("bogon network");
}

function assert_path_length() {
  if bgp_path.len > 64 then _reject("path too long");
}

function assert_path_no_bogon() {
  if bgp_path ~ INVALID_ASNS then _reject("bogon ASN in path");
}

function assert_path_no_transit_asn() {
   if bgp_path ~ TRANSIT_ASNS then _reject("transit ASN in path");
}

function assert_path_not_transit(int asnr) {
  if bgp_path !~ [= asnr+ =] then _reject("path is transit");
}

function assert_nexthop(ip addr) {
  if bgp_next_hop != addr then _reject("nexthop is not neighbor address");
}

function assert_roa_valid() {
  if (net.type = NET_IP4 && roa_check(roa_v4) != ROA_VALID)
  || (net.type = NET_IP6 && roa_check(roa_v6) != ROA_VALID)
  then _reject("ROA invalid");
}

function assert_common() {
  assert_net_routable();
  assert_net_not_bogon();
  assert_path_length();
  assert_path_no_bogon();
}

function honor_graceful_shutdown() {
  if (65535, 0) ~ bgp_community then {
    bgp_local_pref = 0;
  }
}

function import_ix() {
  assert_common();
  honor_graceful_shutdown();

  accept;
}

function export_ix() {
  assert_source();
  if ifname != PEERING_IFACE then reject;
  assert_common();

  accept;
}

function import_user(int asnr; ip addr) {
  assert_nexthop(addr);
  assert_common();
  assert_path_no_transit_asn();
  assert_path_not_transit(asnr);
  assert_roa_valid();

  honor_graceful_shutdown();

  accept;
}

function export_user() {
  assert_source();
  assert_common();

  if ifname != PEERING_IFACE then {
    bgp_next_hop = peering_ip();
  }

  accept;
}
